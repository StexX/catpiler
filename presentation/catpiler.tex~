\documentclass{beamer}

\usepackage{beamerthemesplit}

\usepackage[utf8x]{inputenc} % UTF-8 for the latex file
\usepackage[T1]{fontenc}
\usepackage{ae}
\usepackage[german]{babel}
\usepackage{booktabs}
\usepackage{multirow}
\usepackage{listings}
\usepackage{wasysym}

\addto\captionsgerman{%
  \renewcommand{\figurename}{Abb.}%
  \renewcommand{\tablename}{Tab.}%
} 
\institute{\includegraphics[width=0.3\textwidth]{img/catpiler_logo.png}}
\title{CATpiler}
%\includegraphics[width=0.3\textwidth]{img/catpiler_logo.png}
\subtitle{A Compiler for the LOLCode Language}
\author{Stephanie Stroka}
\date{25. Januar 2010}
%\institute{Institut f\"ur Computerwissenschaften \\ Universit\"at Salzburg}

\usetheme{SalzburgResearch}

\begin{document}

\frame[plain]{
	\titlepage
}

%\frame{\frametitle{Gliederung} \tableofcontents}

\section{LOLCode - Die Eingabesprache}

\frame
{
	\frametitle{Besondere Eigenschaften von LOLCode}
	\begin{itemize}
		\item Esoterische Programmiersprache
		\item Keywords können aus mehreren Wörtern bestehen
		\item Prefix statt Infix-Operatoren
		\item Typenangabe ist optional
		\item Operationsergebnisse werden in globaler Variable \textbf{IT} gespeichert
	\end{itemize}
}

\frame
{
	\frametitle{Einschränkungen von LOLCode Spec1.2}
	\begin{itemize}
		\item Keine einzelnen Character
		\item Keine Arrays
		\item Keine Records
	\end{itemize}
}

\section{CATpiler}

\subsection{CATpiler - Grundlegendes}
\frame
{
	\frametitle{CATpiler - Grundlegendes}
	\begin{itemize}
		\item Erster verfügbarer Compiler für LOLCode
		\item Geschrieben in Java
		\item Entwickelt für MIPS Architekturen (RISC)
		\item Generiert MIPS Assembler Instruktionen in Text-Form
	\end{itemize}
}

\subsection{Besonderheiten des CATpilers}
\frame
{
	\frametitle{Besonderheiten des CATpilers}
	\begin{itemize}
		\item Verzögerte Typ-Erkennung
		\item Lazy Loading
		\item Überspringen von Verzweigungen und Schleifen, die nie erreicht werden
		\item I/O Operationen durch syscalls
		\item Separate Compilation
		\item Compiletime Garbage-Collection
	\end{itemize}
}

%\subsection{Beispiel: Lazy Loading}
%\frame
%{
%	\frametitle{Beispiel: Lazy Loading}
%\lstset{language=}
%\lstinputlisting[
%        label=lst:Verzweigung in LOLCode,
%        captionpos = b,
%        numbers=none,
%        frame=none,
%        breaklines=true,
%        basicstyle=\ttfamily\tiny,
%        keywordstyle=\bfseries,
%        commentstyle=\itshape,
%        stringstyle=\itshape
%]{code/lazy_loading.lol}
%
%}

\frame
{
	\frametitle{Separate Compilation}
	\begin{itemize}
		\item Rekursives Parsen nach imports
		\item MIPS Code wird in .cat files gelegt
		\item Header der .cat files gibt Auskunft über benötigte Imports und über implementierte Funktionen
		\item Linker kopiert alle .cat files in ein .asm file
	\end{itemize}
}

\frame
{
	\frametitle{Compiletime Garbage-Collection}
	\begin{itemize}
		\item Heap wird initial in gleich große Blöcke geteilt
		\item Anfangsadressen werden als globale Variablen gehalten
		\item Es können ein oder mehrere Blöcke zugeteilt werden
		\item Bei der Zuteilung wird ein Referenzcounter erhöht
		\item Parser erhöht beim Übergabe an Funktionen den Referenzcounter
		\item Parser dekrementiert beim Verlassen von Funktionen den Referenzcounter
		\item Sobald Referenzcounter = 0 ist, werden die Blöcke als \textit{unused} makiert
	\end{itemize}
}

\section{Zusätzliche Informationen}

\frame
{
	\frametitle{Zusätzliche Informationen}
	\begin{itemize}
		\item 166 Tests (3310 Code-Zeilen)
		\item Github Repository: 

\url{http://github.com/StexX/catpiler}
		\item Informationen über LOLcode: 

\url{http://lolcode.com/}
	\end{itemize}

}

\end{document}
